//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Toggle.MachineAvailabilityServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LabObject", Namespace="http://schemas.datacontract.org/2004/07/SIUCMachineAvailabilityService")]
    [System.SerializableAttribute()]
    public partial class LabObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LabBuildingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LabCloseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LabFloorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LabIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LabMachineCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LabNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LabOpenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LabRoomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LabStatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LabBuilding {
            get {
                return this.LabBuildingField;
            }
            set {
                if ((object.ReferenceEquals(this.LabBuildingField, value) != true)) {
                    this.LabBuildingField = value;
                    this.RaisePropertyChanged("LabBuilding");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LabClose {
            get {
                return this.LabCloseField;
            }
            set {
                if ((object.ReferenceEquals(this.LabCloseField, value) != true)) {
                    this.LabCloseField = value;
                    this.RaisePropertyChanged("LabClose");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LabFloor {
            get {
                return this.LabFloorField;
            }
            set {
                if ((this.LabFloorField.Equals(value) != true)) {
                    this.LabFloorField = value;
                    this.RaisePropertyChanged("LabFloor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LabId {
            get {
                return this.LabIdField;
            }
            set {
                if ((this.LabIdField.Equals(value) != true)) {
                    this.LabIdField = value;
                    this.RaisePropertyChanged("LabId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LabMachineCount {
            get {
                return this.LabMachineCountField;
            }
            set {
                if ((this.LabMachineCountField.Equals(value) != true)) {
                    this.LabMachineCountField = value;
                    this.RaisePropertyChanged("LabMachineCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LabName {
            get {
                return this.LabNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LabNameField, value) != true)) {
                    this.LabNameField = value;
                    this.RaisePropertyChanged("LabName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LabOpen {
            get {
                return this.LabOpenField;
            }
            set {
                if ((object.ReferenceEquals(this.LabOpenField, value) != true)) {
                    this.LabOpenField = value;
                    this.RaisePropertyChanged("LabOpen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LabRoom {
            get {
                return this.LabRoomField;
            }
            set {
                if ((object.ReferenceEquals(this.LabRoomField, value) != true)) {
                    this.LabRoomField = value;
                    this.RaisePropertyChanged("LabRoom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LabStatus {
            get {
                return this.LabStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.LabStatusField, value) != true)) {
                    this.LabStatusField = value;
                    this.RaisePropertyChanged("LabStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MachineObject", Namespace="http://schemas.datacontract.org/2004/07/SIUCMachineAvailabilityService")]
    [System.SerializableAttribute()]
    public partial class MachineObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LabIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MachineIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineLabelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LabId {
            get {
                return this.LabIdField;
            }
            set {
                if ((this.LabIdField.Equals(value) != true)) {
                    this.LabIdField = value;
                    this.RaisePropertyChanged("LabId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MachineId {
            get {
                return this.MachineIdField;
            }
            set {
                if ((this.MachineIdField.Equals(value) != true)) {
                    this.MachineIdField = value;
                    this.RaisePropertyChanged("MachineId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineLabel {
            get {
                return this.MachineLabelField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineLabelField, value) != true)) {
                    this.MachineLabelField = value;
                    this.RaisePropertyChanged("MachineLabel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineName {
            get {
                return this.MachineNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineNameField, value) != true)) {
                    this.MachineNameField = value;
                    this.RaisePropertyChanged("MachineName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineType {
            get {
                return this.MachineTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineTypeField, value) != true)) {
                    this.MachineTypeField = value;
                    this.RaisePropertyChanged("MachineType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MachineAvailabilityServiceReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        bool Login(string machine_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string machine_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Logout", ReplyAction="http://tempuri.org/IService1/LogoutResponse")]
        bool Logout(string machine_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Logout", ReplyAction="http://tempuri.org/IService1/LogoutResponse")]
        System.Threading.Tasks.Task<bool> LogoutAsync(string machine_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Reset", ReplyAction="http://tempuri.org/IService1/ResetResponse")]
        bool Reset(string machine_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Reset", ReplyAction="http://tempuri.org/IService1/ResetResponse")]
        System.Threading.Tasks.Task<bool> ResetAsync(string machine_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Initialize", ReplyAction="http://tempuri.org/IService1/InitializeResponse")]
        bool Initialize(string machine_name, string mac_address, string ip_address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Initialize", ReplyAction="http://tempuri.org/IService1/InitializeResponse")]
        System.Threading.Tasks.Task<bool> InitializeAsync(string machine_name, string mac_address, string ip_address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetComputersAvailability", ReplyAction="http://tempuri.org/IService1/GetComputersAvailabilityResponse")]
        bool[] GetComputersAvailability(string lab_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetComputersAvailability", ReplyAction="http://tempuri.org/IService1/GetComputersAvailabilityResponse")]
        System.Threading.Tasks.Task<bool[]> GetComputersAvailabilityAsync(string lab_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLabAvailability", ReplyAction="http://tempuri.org/IService1/GetLabAvailabilityResponse")]
        bool GetLabAvailability(string lab_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLabAvailability", ReplyAction="http://tempuri.org/IService1/GetLabAvailabilityResponse")]
        System.Threading.Tasks.Task<bool> GetLabAvailabilityAsync(string lab_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllLabs", ReplyAction="http://tempuri.org/IService1/GetAllLabsResponse")]
        Toggle.MachineAvailabilityServiceReference.LabObject[] GetAllLabs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllLabs", ReplyAction="http://tempuri.org/IService1/GetAllLabsResponse")]
        System.Threading.Tasks.Task<Toggle.MachineAvailabilityServiceReference.LabObject[]> GetAllLabsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetComputersInLab", ReplyAction="http://tempuri.org/IService1/GetComputersInLabResponse")]
        Toggle.MachineAvailabilityServiceReference.MachineObject[] GetComputersInLab(string lab_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetComputersInLab", ReplyAction="http://tempuri.org/IService1/GetComputersInLabResponse")]
        System.Threading.Tasks.Task<Toggle.MachineAvailabilityServiceReference.MachineObject[]> GetComputersInLabAsync(string lab_name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Toggle.MachineAvailabilityServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Toggle.MachineAvailabilityServiceReference.IService1>, Toggle.MachineAvailabilityServiceReference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Login(string machine_name) {
            return base.Channel.Login(machine_name);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string machine_name) {
            return base.Channel.LoginAsync(machine_name);
        }
        
        public bool Logout(string machine_name) {
            return base.Channel.Logout(machine_name);
        }
        
        public System.Threading.Tasks.Task<bool> LogoutAsync(string machine_name) {
            return base.Channel.LogoutAsync(machine_name);
        }
        
        public bool Reset(string machine_name) {
            return base.Channel.Reset(machine_name);
        }
        
        public System.Threading.Tasks.Task<bool> ResetAsync(string machine_name) {
            return base.Channel.ResetAsync(machine_name);
        }
        
        public bool Initialize(string machine_name, string mac_address, string ip_address) {
            return base.Channel.Initialize(machine_name, mac_address, ip_address);
        }
        
        public System.Threading.Tasks.Task<bool> InitializeAsync(string machine_name, string mac_address, string ip_address) {
            return base.Channel.InitializeAsync(machine_name, mac_address, ip_address);
        }
        
        public bool[] GetComputersAvailability(string lab_name) {
            return base.Channel.GetComputersAvailability(lab_name);
        }
        
        public System.Threading.Tasks.Task<bool[]> GetComputersAvailabilityAsync(string lab_name) {
            return base.Channel.GetComputersAvailabilityAsync(lab_name);
        }
        
        public bool GetLabAvailability(string lab_name) {
            return base.Channel.GetLabAvailability(lab_name);
        }
        
        public System.Threading.Tasks.Task<bool> GetLabAvailabilityAsync(string lab_name) {
            return base.Channel.GetLabAvailabilityAsync(lab_name);
        }
        
        public Toggle.MachineAvailabilityServiceReference.LabObject[] GetAllLabs() {
            return base.Channel.GetAllLabs();
        }
        
        public System.Threading.Tasks.Task<Toggle.MachineAvailabilityServiceReference.LabObject[]> GetAllLabsAsync() {
            return base.Channel.GetAllLabsAsync();
        }
        
        public Toggle.MachineAvailabilityServiceReference.MachineObject[] GetComputersInLab(string lab_name) {
            return base.Channel.GetComputersInLab(lab_name);
        }
        
        public System.Threading.Tasks.Task<Toggle.MachineAvailabilityServiceReference.MachineObject[]> GetComputersInLabAsync(string lab_name) {
            return base.Channel.GetComputersInLabAsync(lab_name);
        }
    }
}
